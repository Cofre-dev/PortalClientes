"""
Django settings for Customers project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-l4+xdt$#i1yf2eozm(1#2#mdipk+5+k0l*%dbc9rk(w7qnq^b+'
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'

#Añade aquí la futura URL de tu frontend (Netlify) y tu backend (Render)
ALLOWED_HOSTS = [
    'portalclientes.onrender.com',
]

RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    #Aplicaciones externas (DRF)
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    
    #Mi app
    'Portal',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Customers.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.django',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Customers.wsgi.application'


# default Database 
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

DATABASES = {
    'default': dj_database_url.config(
        # Usa la URL de la base de datos de Render, o SQLite si no la encuentra
        default=f"sqlite:///{BASE_DIR / 'db.sqlite3'}",
        conn_max_age=600
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Le dice a DRF que use la autenticación por Token y restrinja el acceso por defecto
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': ('rest_framework_simplejwt.authentication.JWTAuthentication',),
    'DEFAULT_PERMISSION_CLASSES': ('rest_framework.permissions.IsAuthenticated',)
}

# ============================================
# CONFIGURACIÓN CORS - CORREGIDA
# ============================================

# Para desarrollo - permite todos los orígenes
if DEBUG:
    CORS_ALLOW_ALL_ORIGINS = True
    ALLOWED_HOSTS.extend(['127.0.0.1', 'localhost'])
else:
    # Para producción - especifica los orígenes permitidos
    CORS_ALLOWED_ORIGINS = [
        "https://portalclientesaraybustamante.netlify.app",
        "http://localhost:5173",  # Para desarrollo local
        "http://127.0.0.1:5173",  # Para desarrollo local
    ]

# CORS_TRUSTED_ORIGINS es diferente a CORS_ALLOWED_ORIGINS
# CORS_TRUSTED_ORIGINS es para formularios Django, no para API
CORS_TRUSTED_ORIGINS = [
    "https://portalclientesaraybustamante.netlify.app",
    "http://localhost:5173",
    "http://127.0.0.1:5173",
]

# Headers permitidos
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Métodos permitidos
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# Permitir cookies y credenciales
CORS_ALLOW_CREDENTIALS = True

# Si necesitas permitir headers específicos
CORS_EXPOSE_HEADERS = [
    'Content-Type',
    'X-CSRFToken',
]

# Agregar URL del frontend desde variable de entorno
FRONTEND_URL = os.environ.get('FRONTEND_URL')
if FRONTEND_URL:
    if not DEBUG:  # Solo en producción
        if FRONTEND_URL not in CORS_ALLOWED_ORIGINS:
            CORS_ALLOWED_ORIGINS.append(FRONTEND_URL)
    if FRONTEND_URL not in CORS_TRUSTED_ORIGINS:
        CORS_TRUSTED_ORIGINS.append(FRONTEND_URL)
    
    # Agregar el dominio a ALLOWED_HOSTS
    from urllib.parse import urlparse
    parsed_url = urlparse(FRONTEND_URL)
    if parsed_url.netloc not in ALLOWED_HOSTS:
        ALLOWED_HOSTS.append(parsed_url.netloc)


# URL que se usará para acceder a los archivos subidos
MEDIA_URL = '/media/'

# Ruta en el disco duro donde se guardarán los archivos subidos
MEDIA_ROOT = BASE_DIR / 'media'

STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'